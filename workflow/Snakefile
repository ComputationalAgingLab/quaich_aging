report: "report/workflow.rst"

#include: "rules/common.smk"
#include: "rules/other.smk"

import yaml
import os
with open(config["distiller_config"], 'r') as f:
    distiller_config = yaml.load(f, Loader=yaml.FullLoader)

config["samples"] = distiller_config["input"]["raw_reads_paths"].keys()
config["merged"] = distiller_config["input"]["library_groups"].keys()
config["genome"] = distiller_config["input"]["genome"]["assembly_name"]
config["resolutions"] = distiller_config["bin"]["resolutions"]
config["base_resolution"] = min(config["resolutions"])
config["eigenvector_resolutions"] = filter(lambda x: x >= config["eigenvector_resolutions_min"],
                                            config["resolutions"])


rule all:
    input:
        lambda wildcards: expand("{expected_path}/{sample}_{resolution}_expected.tsv",
                                expected_path = config["path_expected"],
                                sample = config["samples"],
                                resolution = config["resolutions"]),
        lambda wildcards: expand("{eigen_path}/{sample}_{resolution}_eig.cis.vecs.tsv",
                                eigen_path = config["path_eigenvectors"],
                                sample = config["samples"],
                                resolution = config["eigenvector_resolutions"])

rule make_expected:
    input:
        f'{config["path_coolers"]}/{{sample}}.{config["genome"]}.mapq_30.{config["base_resolution"]}.mcool'
    output:
        f'{config["path_expected"]}/{{sample}}_{{resolution,[0-9]+}}_expected.tsv'
    params: resolution = "{resolution}"
    threads: 4
    resources:
        mem_mb = lambda wildcards, threads: threads*8*1024
    shell:
        "cooltools compute-expected -p {threads} {input}::resolutions/{params.resolution} --ignore-diags 0 -o {output}"

rule make_eigenvectors:
    input:
        reftrack = f'{config["path_genomes"]}/{config["genome"]}/gc/{config["genome"]}_{{resolution,[0-9]+}}_gc.bedgraph',
        cooler = f'{config["path_coolers"]}/{{sample}}.{config["genome"]}.mapq_30.{config["base_resolution"]}.mcool'
    output:
        f'{config["path_eigenvectors"]}/{{sample}}_{{resolution,[0-9]+}}_eig.cis.vecs.tsv',
        f'{config["path_eigenvectors"]}/{{sample}}_{{resolution,[0-9]+}}_eig.cis.lam.txt'
    params:
        resolution = "{resolution}",
        prefix = lambda wildcards, output: output[0][:-13]
    threads: 1
    resources:
        mem_mb = 8*1024
    shell:
        "cooltools call-compartments --reference-track {input.reftrack} {input.cooler}::resolutions/{params.resolution} -o {params.prefix}"

rule make_gc:
    input:
        fasta = f'{config["path_genomes"]}/{config["genome"]}/{config["genome"]}.fa',
        bins = f'{config["path_genomes"]}/{config["genome"]}/bins/{config["genome"]}_{{resolution,[0-9]+}}_bins.bed'
    output:
        f'{config["path_genomes"]}/{config["genome"]}/gc/{config["genome"]}_{{resolution,[0-9]+}}_gc.bedgraph'
    threads: 1
    resources:
        mem_mb = 8*1024
    shell:
        "cooltools genome gc {input.bins} {input.fasta} > {output}"

rule make_bins:
    input:
        chromsizes = distiller_config["input"]["genome"]["chrom_sizes_path"]
    output:
        f'{config["path_genomes"]}/{config["genome"]}/bins/{config["genome"]}_{{resolution,[0-9]+}}_bins.bed'
    params: resolution = "{resolution}"
    threads: 1
    resources:
        mem_mb = 8*1024
    shell:
        "cooltools genome binnify {input} {params.resolution} > {output}"

